{
"/home/joppe/www/joppe/string/src/pad.ts":{"path":"/home/joppe/www/joppe/string/src/pad.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":34}},"2":{"start":{"line":20,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":21,"column":4},"end":{"line":21,"column":8}},"4":{"start":{"line":22,"column":4},"end":{"line":22,"column":9}},"5":{"start":{"line":37,"column":13},"end":{"line":53,"column":2}},"6":{"start":{"line":37,"column":83},"end":{"line":37,"column":111}},"7":{"start":{"line":38,"column":24},"end":{"line":38,"column":40}},"8":{"start":{"line":41,"column":4},"end":{"line":50,"column":5}},"9":{"start":{"line":42,"column":29},"end":{"line":42,"column":51}},"10":{"start":{"line":43,"column":29},"end":{"line":43,"column":55}},"11":{"start":{"line":45,"column":8},"end":{"line":49,"column":9}},"12":{"start":{"line":46,"column":12},"end":{"line":46,"column":36}},"13":{"start":{"line":47,"column":15},"end":{"line":49,"column":9}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":28}},"15":{"start":{"line":52,"column":4},"end":{"line":52,"column":18}}},"fnMap":{"1":{"name":"(anonymous_0)","line":20,"loc":{"start":{"line":20,"column":19},"end":{"line":23,"column":1}}},"2":{"name":"(anonymous_1)","line":37,"loc":{"start":{"line":37,"column":111},"end":{"line":53,"column":1}}}},"branchMap":{"1":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":12},"end":{"line":20,"column":19}},{"start":{"line":20,"column":12},"end":{"line":20,"column":19}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":83},"end":{"line":37,"column":111}},{"start":{"line":37,"column":83},"end":{"line":37,"column":111}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":50,"column":5}},{"start":{"line":41,"column":4},"end":{"line":50,"column":5}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":49,"column":9}},{"start":{"line":45,"column":8},"end":{"line":49,"column":9}}]},"5":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":15},"end":{"line":49,"column":9}},{"start":{"line":47,"column":15},"end":{"line":49,"column":9}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":6,"7":5,"8":5,"9":3,"10":3,"11":3,"12":1,"13":2,"14":2,"15":5},"b":{"1":[1,1],"2":[1,4],"3":[3,2],"4":[1,2],"5":[2,0]},"f":{"1":1,"2":5},"code":"import * as string from './repeat';\n\n/**\n * @interface\n */\nexport interface PadFunctionInterface {\n    /**\n     * @param {string} source\n     * @param {string} char\n     * @param {number} length\n     * @param {number} type\n     * @returns {number}\n     */\n    (source:string, char:string, length:number, type?:number):string;\n}\n\n/**\n * Indicates if the characters are used as prefix or as suffix\n */\nexport enum PadType {\n    Left,\n    Right\n}\n\n/**\n * Put a character in front (or at the end) of a string.\n *\n * The technique used is to create an array of fixed length and join the (empty) parts together\n * with the provided char.\n *\n * @param {string} input\n * @param {string} char\n * @param {number} length\n * @param {PadType} [type]\n * @returns {string}\n */\nexport const pad:PadFunctionInterface = (input:string, char:string, length:number, type:PadType = PadType.Right):string => {\n    let output:string = input.toString();\n\n    // only add characters if the output string is not of the desired length\n    if (output.length < length) {\n        const count:number = length - output.length;\n        const affix:string = string.repeat(char, count);\n\n        if (PadType.Left === type) {\n            output = affix + output;\n        } else if (PadType.Right === type) {\n            output += affix;\n        }\n    }\n\n    return output;\n};\n","l":{"1":1,"20":1,"21":1,"22":1,"37":6,"38":5,"41":5,"42":3,"43":3,"45":3,"46":1,"47":2,"48":2,"52":5}},
"/home/joppe/www/joppe/string/src/repeat.ts":{"path":"/home/joppe/www/joppe/string/src/repeat.ts","statementMap":{"1":{"start":{"line":18,"column":13},"end":{"line":25,"column":2}},"2":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"3":{"start":{"line":20,"column":8},"end":{"line":20,"column":78}},"4":{"start":{"line":24,"column":4},"end":{"line":24,"column":56}}},"fnMap":{"1":{"name":"(anonymous_0)","line":18,"loc":{"start":{"line":18,"column":73},"end":{"line":25,"column":1}}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},{"start":{"line":19,"column":4},"end":{"line":21,"column":5}}]}},"s":{"1":1,"2":8,"3":1,"4":7},"b":{"1":[1,7]},"f":{"1":8},"code":"/**\n * @interface RepeatFunctionInterface\n */\nexport interface RepeatFunctionInterface {\n    /**\n     * @param {string} str\n     * @param {number} count\n     * @returns {string}\n     */\n    (str:string, count:number):string;\n}\n\n/**\n * @param {string} input\n * @param {number} count\n * @returns {string}\n */\nexport const repeat:RepeatFunctionInterface = (input:string, count:number):string => {\n    if (0 > count) {\n        throw new Error(`Count must be a positive number, \"${count}\" given.`);\n    }\n\n    // the count is always one extra (with join two parts become one)\n    return new Array(Math.floor(count) + 1).join(input);\n};\n","l":{"18":1,"19":8,"20":1,"24":7}},
"/home/joppe/www/joppe/string/src/reverse.ts":{"path":"/home/joppe/www/joppe/string/src/reverse.ts","statementMap":{"1":{"start":{"line":16,"column":13},"end":{"line":18,"column":2}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":46}}},"fnMap":{"1":{"name":"(anonymous_0)","line":16,"loc":{"start":{"line":16,"column":61},"end":{"line":18,"column":1}}}},"branchMap":{},"s":{"1":1,"2":3},"b":{},"f":{"1":3},"code":"/**\n * @interface ReverseFunctionInterface\n */\nexport interface ReverseFunctionInterface {\n    /**\n     * @param {string} input\n     * @returns {string}\n     */\n    (input:string):string;\n}\n\n/**\n * @param {string} input the string that will be reversed\n * @returns {string}\n */\nexport const reverse:ReverseFunctionInterface = (input:string):string => {\n    return input.split('').reverse().join('');\n};\n","l":{"16":1,"17":3}}}
